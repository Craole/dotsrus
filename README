# Dots 'R' Us

A high-performance environment manager that caches paths and environment variables
for lightning-fast shell initialization.

## Why Dots 'R' Us?

- **Speed**: Up to 10x faster shell initialization through smart caching
- **Memory Efficient**: Minimal RAM usage with optimized variable storage
- **Cross-Platform**: Works seamlessly across Linux, macOS, and Windows
- **Safe**: Written in Rust with unsafe code forbidden

## Features

- **Smart Caching**: Cache frequently accessed paths and environment variables
- **Instant Access**: Pre-compiled environment lookups
- **Dotfiles Management**: Version control your configurations
- **Path Handling**: Efficient PATH variable management
- **Variable Management**: Organize and cache environment variables
- **Watch Mode**: Auto-update cache on config changes

## Performance

| Operation   | Traditional Method | Dots 'R' Us |
| ----------- | ------------------ | ----------- |
| Shell Init  | 500-1000ms         | 50-100ms    |
| Path Lookup | 10-20ms            | ~1ms        |
| ENV Load    | 100-200ms          | ~10ms       |

## Installation

```sh
cargo install dotsrus
```

## Building from Source

```sh
# 1. Clone the repository:
git clone https://github.com/Craole/dotsrus
cd dotsrus

# 2. Build the project:
if nix develop --version >/dev/null 2>&1;then
  nix develop
else
  cargo build --release
fi
```

## Usage

Basic usage examples coming soon.

```sh
# Initialize configuration
dotsrus init

# Add a path to cache
dotsrus path add ~/.local/bin

# Add an environment variable
dotsrus env set EDITOR nvim

# Generate shell configuration
dotsrus generate
```

```toml
# ~/.config/dotsrus/config.toml
[paths]
cache_dir = "~/.cache/dotsrus"
watch_paths = [
    "~/.local/bin",
    "~/go/bin"
]

[environment]
cache_enabled = true
refresh_interval = 3600  # seconds
```

## Development

This project uses Nix Flakes for reproducible development environments.

### Prerequisites

- Nix package manager with flakes enabled
- Git (for source control)
- _Optional_: Rust toolchain (automatically provided by Nix shell)

### Quick Development Start

```sh
# Enter development shell with all tools
nix develop

# Or use directly without entering shell
nix develop --command cargo build
```

## Development Environment Features

- Development Environment Features
- Rust toolchain (stable)
- Cargo and common tools
- Formatting tools (rustfmt)
- Linting tools (clippy)
- Testing framework
- Build essentials

## Configuration

Configuration details coming soon.

## License

  This project is licensed under the [Apache License](./LICENSE)

## Author

Craig 'Craole' Cole <ccutils@craole.cc>

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.
